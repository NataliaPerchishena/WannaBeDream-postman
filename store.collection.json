{
	"info": {
		"_postman_id": "530f04e1-db55-4eee-8e59-56c922de8887",
		"name": "WannaBeDream-store",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "17584487"
	},
	"item": [
		{
			"name": "Products",
			"item": [
				{
					"name": "List products",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/products"
					},
					"response": []
				},
				{
					"name": "Get product by ID",
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/products/3"
					},
					"response": []
				},
				{
					"name": "Create product",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"orange\",\r\n    \"price\": 8,\r\n    \"sku\": 123321123,\r\n    \"description\": \"wouh\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/products"
					},
					"response": []
				},
				{
					"name": "Update product",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": 4,\r\n    \"name\": \"banana\",\r\n    \"price\": 155,\r\n    \"sku\": 123321123,\r\n    \"description\": \"changed description\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/products"
					},
					"response": []
				},
				{
					"name": "Remove product by ID",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{baseUrl}}/products/4"
					},
					"response": []
				},
				{
					"name": "Get product in Desc order by price",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"// Arrange",
									"function isSortedDesc(arr, key) {",
									"    for (let i = 1; i < arr.length; i++) {",
									"        if (arr[i - 1][key] < arr[i][key]) return false; // DESC: попередній >= поточного",
									"    }",
									"    return true;",
									"}",
									"",
									"// Act",
									"const products = pm.response.json();",
									"",
									"// Assert",
									"pm.test(\"products should be sorted by price DESC\", function () {",
									"    pm.expect(isSortedDesc(products, 'price')).to.be.true;",
									"});",
									"",
									"// function isSortedAsc(arr, key) {",
									"//     for (let i = 1; i < arr.length; i++) {",
									"//         if (arr[i - 1][key] > arr[i][key]) return false; // ASC: попередній <= поточного",
									"//     }",
									"//     return true;",
									"// }",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products?sortOrder=DESC&sortKey=price",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							],
							"query": [
								{
									"key": "sortOrder",
									"value": "DESC"
								},
								{
									"key": "sortKey",
									"value": "price"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Orders",
			"item": [
				{
					"name": "List orders",
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/orders"
					},
					"response": []
				},
				{
					"name": "Get order by ID",
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/orders/3"
					},
					"response": []
				},
				{
					"name": "Create order",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"order5\",\r\n    \"sku\": 123425445656765\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/orders"
					},
					"response": []
				},
				{
					"name": "Update order",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": 4,\r\n    \"name\": \"order5\",\r\n    \"sku\": 123425445656765\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/orders"
					},
					"response": []
				},
				{
					"name": "Remove order by ID",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{baseUrl}}/orders/4"
					},
					"response": []
				}
			]
		},
		{
			"name": "Users",
			"item": [
				{
					"name": "List users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Arrange",
									"const schema = {",
									"    \"type\": \"array\",",
									"    \"items\": {",
									"        \"type\": \"object\",",
									"        \"required\": [\"id\", \"firstName\", \"lastName\", \"email\", \"dateOfBirth\", \"emailVerified\", \"signUpDate\", \"status\", \"level\"],",
									"        \"properties\": {",
									"            \"id\": { \"type\": \"integer\" },",
									"            \"firstName\": { \"type\": \"string\" },",
									"            \"lastName\": { \"type\": \"string\" },",
									"            \"email\": { \"type\": \"string\", \"format\": \"email\" },",
									"            \"dateOfBirth\": { \"type\": \"string\" },",
									"            \"emailVerified\": { \"type\": \"boolean\" },",
									"            \"signUpDate\": { \"type\": \"string\" },",
									"            \"status\": { \"type\": \"string\" },",
									"            \"level\": { \"type\": \"string\" }",
									"        }",
									"    }",
									"};",
									"",
									"// Act",
									"const users = pm.response.json();",
									"",
									"// Assert",
									"pm.test(\"Response matches JSON schema\", function () {",
									"    pm.expect(tv4.validate(users, schema)).to.be.true;",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/users"
					},
					"response": []
				},
				{
					"name": "Get user by ID",
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/users/3"
					},
					"response": []
				},
				{
					"name": "Create user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"pm.test(\"Response time is less than 100ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(100);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"Dum\",\r\n    \"lastName\": \"Just\",\r\n    \"email\": \"dum.just@gmail.com\",\r\n    \"dateOfBirth\": \"2008-11-22\",\r\n    \"emailVerified\": true,\r\n    \"signUpDate\": \"2025-08-24\",\r\n    \"status\": \"active\",\r\n    \"level\": \"consumer\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/users"
					},
					"response": []
				},
				{
					"name": "Update user",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"Ilon\",\r\n    \"lastName\": \"Mask\",\r\n    \"email\": \"ilon.mask@gmail.com\",\r\n    \"dateOfBirth\": \"2001-10-99\",\r\n    \"emailVerified\": true,\r\n    \"signUpDate\": \"2019-08-24\",\r\n    \"status\": \"active\",\r\n    \"level\": \"consummer\",\r\n    \"id\": 10\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/users"
					},
					"response": []
				},
				{
					"name": "Remove user by ID",
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/users/11"
					},
					"response": []
				},
				{
					"name": "Get paginated users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"// const expectedPageSize = 3;",
									"// const users = pm.response.json();",
									"// pm.test(\"Response should contain only 3 users\", function () {",
									"//     pm.expect(users.length).to.eql(expectedPageSize);",
									"// });",
									"",
									"// Act",
									"const users = pm.response.json();",
									"",
									"// Get `pageSize` from request URL",
									"const requestUrl = pm.request.url.toString();",
									"const urlParams = new URLSearchParams(requestUrl.split('?')[1]);",
									"const expectedPageSize = parseInt(urlParams.get('pageSize'), 10);",
									"",
									"// Assert",
									"pm.test(\"Response should contain expected number of users (pageSize)\", function () {",
									"    pm.expect(users.length).to.eql(expectedPageSize);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users?page=1&pageSize=4",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "pageSize",
									"value": "4"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get users in order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"// Arrange",
									"function isSortedAsc(arr, key) {",
									"    for (let i = 1; i < arr.length; i++) {",
									"        if (arr[i - 1][key].localeCompare(arr[i][key]) > 0) return false;",
									"    }",
									"    return true;",
									"}",
									"",
									"// Act",
									"const users = pm.response.json();",
									"",
									"// Assert",
									"pm.test(\"Users should be sorted by firstName desc\", function () {",
									"    pm.expect(isSortedAsc(users, 'firstName')).to.be.true;",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users?sortOrder=ASC&sortKey=firstName",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							],
							"query": [
								{
									"key": "sortOrder",
									"value": "ASC"
								},
								{
									"key": "sortKey",
									"value": "firstName"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:3000",
			"type": "string"
		}
	]
}